   ### Phase 0: Framework-First Architecture Setup & Core Logic Decoupling [05.18.2025 This phase is assumed to have been 100% completed.]

**Goal:** Transition the existing React application towards a modular structure by separating core data management logic from the UI. This phase establishes the foundational directories (`/core`, `/contracts`), defines clear interfaces and responsibilities, implements basic data integrity checks and utilities, and scaffolds unit testing. This makes the codebase more maintainable and robustly prepares it for more advanced backend features in Phase 1. This revised structure is designed to be implemented with the assistance of an AI coding agent like Claude within a Replit environment.

**Key Outcomes for Phase 0:**
*   A new `/core` directory containing the application's business logic and data management abstractions, initially operating on in-memory data.
*   A new `/contracts` directory containing TypeScript interface definitions for all primary data entities.
*   The React application in `src/` refactored to consume logic and types from `/core` and `/contracts`, no longer managing primary data state or using `localStorage` directly for thoughts (beyond an initial load).
*   Core utilities for ID generation and logging established within `/core`.
*   Basic unit test stubs created for core logic in `/core`.
*   Clearer separation of concerns, making the system easier to reason about and extend.
*   Placeholders for future DevOps, UX, and data migration considerations noted.

**Tasks:**

1.  **Establish Foundational Directory Structure & Configure Path Aliases:**
    *   **Framework Outcome:** Project structure prepared for modular development with convenient import paths.
    *   **Demo Implementation Outcome:** The React application can resolve imports from new core directories using both relative paths and configured aliases.
    *   **Detailed Action (for AI Agent - Claude):**
        1.  **Create Directories:**
            *   In the root directory of the current Replit project, create a new directory named `contracts`.
                *   *Purpose:* This directory will store TypeScript files (`.ts`) defining the data structure interfaces.
            *   In the root directory of the current Replit project, create a new directory named `core`.
                *   *Purpose:* This directory will house the JavaScript/TypeScript modules containing the decoupled core application logic.
            *   *Verification:* Confirm these directories exist at the project root.

        2.  **Configure Path Aliases (Optional but Recommended for Cleaner Imports):**
            *   Create or modify the `jsconfig.json` file in the project's root directory.
            *   Ensure it contains the following configuration to allow imports relative to the `src` directory using `~/` and to alias `/core` and `/contracts` for easier access from `src/`:
                ```json
                {
                  "compilerOptions": {
                    "baseUrl": ".",
                    "paths": {
                      "~/*": ["src/*"],
                      "@core/*": ["core/*"],
                      "@contracts/*": ["contracts/*"]
                    }
                  },
                  "include": ["src", "core", "contracts"]
                }
                ```
            *   *Purpose:* This setup will allow cleaner import statements from within the `src/` directory, such as `import { Thought } from '@contracts/interfaces';` or `import { IdeaManager } from '@core/IdeaManager';`.
            *   *Verification:* After this change, a test import in a temporary file within `src/` (e.g., `src/App.jsx`) like `import Test from '@core/someFile';` (assuming `someFile.js` exists in `core`) should ideally be resolvable by Replit's tooling without errors.

        3.  **Note on Import Path Usage (for AI Agent - Claude):**
            *   **Priority:** When refactoring code in subsequent steps to import modules from `/core` or `/contracts` into files within `src/`, **first attempt to use the configured path aliases**:
                *   `import ... from '@contracts/your-interface-file';`
                *   `import ... from '@core/your-module-file';`
            *   **Fallback to Relative Paths:** If, for any reason, the path aliases do not work or cause issues during refactoring within the Replit environment, revert to using standard **relative paths** as a reliable fallback.

2.  **Define Core Data Structure Interface Contracts:**
    *   **Framework Outcome:** Clear, typed definitions for all primary data entities, promoting consistency and enabling type-safe development within the `/core` framework and for UI consumption. These interfaces will represent Data Transfer Objects (DTOs) suitable for application-layer logic.
    *   **Demo Implementation Outcome:** React components can be refactored to expect props and manage state conforming to these well-defined interfaces.
    *   **Detailed Actions (for AI Agent - Claude):**

        a.  **Initial Interface Extraction & Creation:**
            *   Analyze current data structures in `src/App.jsx` (`createThought` function), `src/utils/exportHandler.js` (`exportPayload.thoughts`), and `src/services/graphService.js`.
            *   Create `/contracts/entities.ts`.
            *   In `/contracts/entities.ts`, generate initial TypeScript `interface` definitions for `Tag`, `Segment`, and `Thought` based on the analysis.
            *   Export these interfaces.

        b.  **Refine Interfaces with Planned Schema Enhancements (DTO Focus):**
            *   Update interfaces in `/contracts/entities.ts` referencing Phase 1 SQLite schema plans.
            *   **Define base types for extensibility at the top of `/contracts/entities.ts`:**
                ```typescript
                export type PredefinedContentType = 'text' | 'image' | 'audio' | 'video' | 'link';
                export type CustomContentType = string & { _brand?: 'CustomContentType' };
                export type ContentType = PredefinedContentType | CustomContentType;

                export type PredefinedAbstractionLevel = 'Fact' | 'Idea' | 'Theme' | 'Goal';
                export type CustomAbstractionLevel = string & { _brand?: 'CustomAbstractionLevel' };
                export type AbstractionLevel = PredefinedAbstractionLevel | CustomAbstractionLevel;

                export type FieldValue = string | number | boolean | Date | string[] | number[]; // Expand as needed
                ```
            *   **Refine `Segment` interface:**
                ```typescript
                export interface Segment {
                  segment_id: string;
                  thought_bubble_id: string;
                  title: string;
                  content: string;
                  content_type: ContentType; // Default 'text'
                  asset_path?: string;
                  fields: Record<string, FieldValue>; // DTO representation
                  embedding_vector?: number[];
                  created_at: string; // ISO date string
                  updated_at: string; // ISO date string
                  abstraction_level: AbstractionLevel; // Default 'Fact'
                  local_priority: number; // Default 0.5
                  cluster_id: string; // Default 'uncategorized_cluster'
                }
                ```
            *   **Refine `Thought` interface:**
                ```typescript
                export interface Thought {
                  thought_bubble_id: string;
                  title: string;
                  description?: string;
                  created_at: string; // ISO date string
                  updated_at: string; // ISO date string
                  color?: string;
                  position?: { x: number; y: number };
                  tags?: Tag[]; // Optional DTO convenience
                  segments?: Segment[]; // Optional DTO convenience
                }
                ```
            *   *(Note for AI Agent): Other interfaces like `SegmentNeighbor` can be defined later if needed as DTOs.*
        b2. **Define LLMExecutor Interface for Future Multi-LLM Support:**
            * Add a new file: `/contracts/llmExecutor.ts`.
            * This interface defines a common structure for executing prompts via different LLM providers.
            * It will be used in Phase 1+ to plug in Claude, Gemini, Qwen, InternVL, or custom Ollama models without altering business logic.

                  ```typescript
                  // contracts/llmExecutor.ts
                  
                  export interface LLMExecutor {
                    name: string;
                    supportsStreaming: boolean;
                    executePrompt(prompt: string): Promise<string>;
                    streamPrompt?(prompt: string): AsyncGenerator<string>;
                    generateMermaid?(context: any): Promise<string>;
                  }
                  ```
        c.  **Add JSDoc Comments:**
            *   Add brief JSDoc comments to each interface and its properties explaining their purpose.

        *   **Verification Step (for AI Agent - Claude):**
            *   Confirm `/contracts/entities.ts` exists with exported `Thought`, `Segment`, `Tag`, `ContentType`, `AbstractionLevel`.
            *   Confirm `Segment` and `Thought` interfaces include all specified fields with correct typings.
            *   Confirm JSDoc comments are present.

3.  **Scaffold Core Logic Abstraction (`IdeaManager`) and Begin UI Decoupling:**
    *   **Framework Outcome:** A foundational `IdeaManager` class/module in `/core` that encapsulates data management logic (initially in-memory) and uses the defined `/contracts` interfaces.
    *   **Demo Implementation Outcome:** Key React components (`App.jsx`, `AddThoughtModal.jsx`, `ThoughtDetailPanel.jsx`) begin to delegate data operations to the `IdeaManager` instead of handling state and `localStorage` directly. The application remains functional using in-memory data management via `IdeaManager`.
    *   **Detailed Actions (for AI Agent - Claude):**

        a.  **Create Initial `IdeaManager` in `/core`:**
            *   Create `@core/IdeaManager.ts`.
            *   Define and export class `IdeaManager`.
            *   Import interfaces from `@contracts/entities.ts`.
            *   Internally manage `private thoughts: Thought[] = [];`.
            *   Constructor attempts one-time load from `localStorage` (key 'thought-web-data') into `this.thoughts`, similar to `App.jsx`'s original `useState` logic for `thoughts`. Log errors, default to empty array on failure.

        b.  **Implement Basic In-Memory CRUD Methods in `IdeaManager`:**
            *   Add public methods: `getThoughts(): Thought[]`, `getThoughtById(id: string): Thought | undefined`, `addThought(thoughtData: ...): Thought`, `updateThought(thoughtId: string, updates: ...): Thought | undefined`, `deleteThought(thoughtId: string): boolean`, `addSegment(thoughtId: string, segmentData: ...): Segment | undefined`, `updateSegment(thoughtId: string, segmentId: string, updates: ...): Segment | undefined`, `deleteSegment(thoughtId: string, segmentId: string): boolean`.
            *   Import and use ID generation utilities from `@core/utils/idUtils.ts` (to be created in Task 5a) for `addThought` and `addSegment`.
            *   These methods operate on the internal `this.thoughts` array.
            *   Ensure returned objects conform to interfaces.

        c.  **Refactor `src/App.jsx` to Use `IdeaManager` (Incremental Steps):**

            *   **3c-i: Instantiate `IdeaManager` and Load Initial `thoughts` State:**
                *   In `src/App.jsx`, import `IdeaManager`. Create an instance.
                *   Initialize `thoughts` state: `useState(() => ideaManager.getThoughts());`.
                *   Remove old `useEffect` that loaded from `localStorage`.
                *   *Verification:* App loads existing `localStorage` data via `IdeaManager`.

            *   **3c-ii: Refactor `createThought` (and `addThought` if distinct) in `src/App.jsx`:**
                *   Modify `createThought` to call `ideaManager.addThought(...)`.
                *   After adding, update React `thoughts` state: `setThoughts([...ideaManager.getThoughts()]);`.
                *   Remove direct `localStorage.setItem` calls from this function.
                *   *Verification:* New thoughts are added to `IdeaManager`'s store; UI updates. No direct `localStorage` writes from `App.jsx`.

            *   **3c-iii: Remove `localStorage` Persistence Logic from `src/App.jsx`:**
                *   Remove the `useEffect` hook that saved `thoughts` to `localStorage`.
                *   *(Developer Decision from previous discussion: `thought-web-dark-mode` `localStorage` handling remains in `App.jsx` for now).*
                *   *Verification:* App functions, but thought changes don't persist across refresh (expected for Phase 0).

        d.  **Refactor Data-Mutating Components to Use `IdeaManager` via Props:**
            *   Pass `ideaManager` instance and a refresh callback (e.g., `refreshThoughts = () => setThoughts([...ideaManager.getThoughts()]);`) from `App.jsx` as props to components like `src/components/ThoughtDetailPanel.jsx`, `src/components/Canvas.jsx` (for position updates), `src/components/Sidebar.jsx` (for batch edits).
            *   Modify these components to call methods on `props.ideaManager` and then `props.refreshThoughts()`.
            *   Remove direct `localStorage.setItem` calls from these components.
            *   *(Note for AI Agent): Refactor one component at a time.*
            *   *Verification:* Components use `ideaManager` prop and refresh callback. UI updates correctly. No direct `localStorage` writes from these components.

4.  **Define Abstraction Taxonomy & Initial Metadata Handling:**
    *   **Framework Outcome:** Core data structures (`Segment` interface) include fields for `abstraction_level` and `cluster_id`, enabling foundational semantic categorization.
    *   **Demo Implementation Outcome:** The UI for creating/editing segments can capture these new metadata fields.
    *   **Detailed Actions (for AI Agent - Claude):**
        a.  **Update `Segment` Interface (Confirm in `@contracts/entities.ts`):**
            *   Ensure `abstraction_level: AbstractionLevel;` and `cluster_id: string;` are present with JSDoc.
        b.  **Update `IdeaManager` Methods for Metadata:**
            *   Modify `IdeaManager.addSegment` and `IdeaManager.updateSegment` to accept and store `abstraction_level` and `cluster_id`. Apply defaults in `addSegment`.
        c.  **Update UI for Metadata (Basic Input):**
            *   In `src/components/AddThoughtModal.jsx` and `src/components/ThoughtDetailPanel.jsx`, enable input/display for `abstraction_level` and `cluster_id`.
        *   **Verification:** Segments can have `abstraction_level` and `cluster_id` managed.

5.  **Implement Core Data Integrity & Utility Foundations:**
    *   **Framework Outcome:** `IdeaManager` includes basic data validation. Core utilities for ID generation and logging are established.
    *   **Demo Implementation Outcome:** Increased robustness; foundational support for debugging.
    *   **Detailed Actions (for AI Agent - Claude):**
        a.  **ID Generation and Uniqueness:**
            *   **Relocate ID Utilities:** Create `@core/utils/idUtils.ts`. Move `newBubbleId` and `newSegmentId` functions from `src/utils/eventBus.js` into it. Export them. Update `IdeaManager` to use these.
            *   **In-Memory ID Uniqueness Check:** In `IdeaManager.addThought/addSegment`, before adding, check if the generated ID already exists in its internal store. If so, log an error/regenerate (simple console log for Phase 0 is fine).
        b.  **Basic Reference Validation:**
            *   In `IdeaManager.addSegment`, ensure the `thoughtId` exists before adding. Log error if not.
        c.  **Establish Basic Logging Utility:**
            *   Create `@core/utils/logger.ts`. Implement a simple `logger` object with `log`, `warn`, `error` methods (initially wrapping `console` methods with a prefix like `[LOGOMESH-CORE]`).
            *   Import and use this `logger` in `IdeaManager` for key operations.
        *   **Verification:** ID utils are in `@core/utils/`. `IdeaManager` uses logger. Basic validation checks are performed.
        d. **Scaffold LLM Audit Logger Stub:**
            * Create a new file: `/core/logger/llmAuditLogger.ts`.
            * This utility logs all prompt/response cycles with an LLM agent and will be extended in Phase 2 to store data in a structured format (e.g., SQLite or Postgres).
            * For now, it wraps `console.log()` with a consistent format for auditability.

            ```typescript
            // core/logger/llmAuditLogger.ts
            
            export function logLLMInteraction(
              agent: string,
              prompt: string,
              output: string,
              metadata?: Record<string, any>
            ): void {
              console.log(`[LLM ${agent}]`, {
                prompt,
                output,
                metadata,
                timestamp: new Date().toISOString(),
              });
            }
            ```

6.  **Scaffold Unit Testing for Core Logic:**
    *   **Framework Outcome:** Basic testing infrastructure set up for `/core` modules.
    *   **Detailed Actions (for AI Agent - Claude):**
        a.  **Confirm Jest Configuration for `/core`:**
            *   Ensure Jest (from `react-scripts`) can find and run tests in `/core` (e.g., `core/**/*.test.ts`).
        b.  **Create Initial Test Stubs for `IdeaManager`:**
            *   Create `@core/IdeaManager.test.ts`.
            *   Add basic test stubs (as previously discussed examples) for `addThought`, `getThoughtById`, `addSegment`, and ideally `updateThought` and `deleteThought`. Ensure tests clear `localStorage` in `beforeEach` for isolation if `IdeaManager` constructor reads from it.
        *   **Verification:** Test files can be created. Example tests pass against the in-memory `IdeaManager`.

7.  **Establish Initial DevOps & UX Documentation Stubs:**
	*   **Framework Outcome:** Basic project structure supports future, more formal DevOps and UX processes.
	*   **Detailed Actions (for AI Agent - Claude or Developer):**
    	a.  **DevOps - Documentation Stubs:**
        	*   Create `/docs/BUILD_PROCESS.md` (Note: "Phase 0: Core logic part of React app build. Phase 1 will introduce Docker for backend API and explore separate build/test for `/core` if it becomes a distinct package.")
        	*   Create `/docs/DATA_MIGRATION.md`. Add the following content:
            	```markdown
            	# Data Migration Strategy

            	## Phase 0 to Phase 1 (localStorage to SQLite)

            	The `IdeaManager` in Phase 0 loads initial data from `localStorage` (key: 'thought-web-data') into its in-memory store. Phase 1 will introduce SQLite as the primary persistent storage.

            	A data migration strategy will be required at the beginning of Phase 1 to ensure any data present in `localStorage` (from prior application use or data entered during Phase 0 development sessions if not persisted elsewhere) is correctly transferred to the new SQLite database structure.

            	**Potential Approaches for Phase 1 Migration:**
            	1.  **One-time Script:** A script (Node.js or directly within the application startup) that reads from `localStorage`, transforms the data to align with the new normalized SQLite schema, and inserts it into the SQLite database.
            	2.  **Enhanced `IdeaManager` (SQLite Adapter):** The SQLite storage adapter for the `IdeaManager` (to be built in Phase 1) could include logic on its first run to check for `localStorage` data and import it.

            	This migration will need to handle mapping from the potentially less structured `localStorage` format to the normalized tables defined for SQLite (e.g., `thoughts`, `segments`, `segment_fields`, `tags`, etc.).

            	## Future Consideration: SQLite to Postgres (Tier 2 / Advanced Scaling)

            	For future scalability, multi-user/multi-agent scenarios, and advanced features (as outlined in Tier 2 of the development plan), a transition from the local SQLite datastore to a more robust, server-based PostgreSQL database (potentially with `pgvector`) is envisioned.

            	This migration would involve:
            	*   Schema mapping from SQLite to PostgreSQL (largely similar but with RDBMS-specific optimizations).
            	*   Data transfer mechanisms.
            	*   Updating the backend API and `/core` persistence layer to target PostgreSQL.

            	This consideration is for long-term architectural evolution and will be addressed in later phases.
            	```
    	b.  **UX - Documentation Stubs:**
        	*   Create `/docs/STYLE_GUIDE.md` (Note: "Basic styling inherited... Formal guide in Phase 1...").
        	*   Create `/docs/ONBOARDING_TOUR.md` (Note: "Concept to be designed later...").
    	*   **Verification:** Markdown files are created with the specified content. The `DATA_MIGRATION.md` file should contain both subsections as described.

8.  **Phase 0 Final Cleanup & Summary:**
    *   **Framework Outcome:** Core logic significantly decoupled, project structured for Phase 1.
    *   **Demo Implementation Outcome:** React app functional with `IdeaManager`.
    *   **Detailed Actions (for AI Agent - Claude and/or Developer):**
        a.  **Review and Refactor Utility Usage:**
            *   Identify remaining utilities in `src/utils/`. Move any general-purpose, non-DOM-specific data logic utilities (if any beyond ID gen) to `@core/utils/`. Update imports.
        b.  **Code Cleanup and Linting:**
            *   Run linters (ESLint, Prettier) across `src/`, `/core/`, `/contracts/`. Fix issues. Remove dead code.
        c.  **Update Phase 0 Summary in Development Plan (This Document):**
            *   (Developer action after AI completes tasks) Replace this task with the "Phase 0 Outcome" statement below.

9.  **Integrate LLM Readiness & Document Hybrid Architecture Approach:**
	*   **Framework Outcome:** Core contracts include an abstraction for LLM execution. Logging for LLM interactions is scaffolded. The overall architecture acknowledges preparation for future hybrid data/agent systems.
	*   **Demo Implementation Outcome:** Foundational elements are in place for future AI feature integration without requiring immediate LLM functionality in the demo.
	*   **Detailed Actions (for AI Agent - Claude):**

    	a.  **Define LLMExecutor Interface:**
        	*   Create the file `/contracts/llmExecutor.ts`.
        	*   Add the `LLMExecutor` interface definition as specified in the `Schema Extension for Phase 0 (more context).txt` document (including `name`, `supportsStreaming`, `executePrompt`, optional `streamPrompt`, and optional `generateMermaid`).
        	*   Add JSDoc comments explaining the interface and its methods.
        	*   *Purpose:* This defines a shared contract for any future LLM provider, enabling modularity.
        	*   *Verification:* The file `/contracts/llmExecutor.ts` exists and correctly defines and exports the `LLMExecutor` interface with JSDoc.

    	b.  **Scaffold LLM Audit Logger:**
        	*   Create the file `/core/logger/llmAuditLogger.ts`.
        	*   Implement the `logLLMInteraction` function as specified in the `Schema Extension for Phase 0 (more context).txt` document, which currently logs to `console.log` with a structured format.
        	*   Add JSDoc comments explaining its purpose and future extension to persistent logging.
        	*   *Purpose:* Establishes a centralized point for logging all LLM prompt/response cycles for future audit and debugging.
        	*   *Verification:* The file `/core/logger/llmAuditLogger.ts` exists and correctly defines and exports the `logLLMInteraction` function.

    	c.  **Document Hybrid LLM Readiness & Future Agent Architecture:**
        	*   *(Developer Action or AI-assisted):* In a relevant section of the main project `README-dev.md` (e.g., a new subsection under "Core Architecture" or as an addendum to Phase 0's description), or in a dedicated `/docs/ARCHITECTURE_VISION.md` file, add a summary explaining these Phase 0 additions for LLM readiness.
        	*   This summary should include:
            	*   The purpose of the `LLMExecutor` interface (pluggable LLMs).
            	*   The role of the `llmAuditLogger.ts` stub (traceability).
            	*   A note that this scaffolding prepares for advanced features like AI-assisted diagramming/reasoning and future external agents (potentially Rust-based, interacting with a more complex backend like Postgres, as inspired by recent discussions).

```mermaid
%% Mermaid: LogoMesh LLM Agent Execution Flow (Future Vision)
sequenceDiagram
    participant UI as LogoMesh UI (React)
    participant IdeaMgr as IdeaManager (/core)
    participant LLMExec as LLMExecutor Interface
    participant Agent as External Agent (Rust/Node)
    participant LLM as LLM Provider (Claude/Gemini/Qwen)
    participant Logger as LLM Audit Logger (core/logger)

    UI->>IdeaMgr: requestLLMTask(prompt)
    IdeaMgr->>LLMExec: executePrompt(prompt)
    LLMExec->>LLM: Call API or local model
    LLM-->>LLMExec: return output
    LLMExec-->>IdeaMgr: return output
    LLMExec->>Logger: logLLMInteraction()
    IdeaMgr-->>UI: return result
```
        	*   *Purpose:* To clearly document the architectural intent behind these Phase 0 additions for future developers and AI agents.
        	*   *Verification:* The chosen documentation file contains a clear explanation of the LLM readiness features added in Phase 0 and their forward-looking implications.

These additions future-proof LogoMesh to become LLM-agnostic, introspective, and flexible.
> **Phase 0 Outcome:**
> The LogoMesh React application's core data management logic has been successfully decoupled from its UI components. A new `/core` directory houses an `IdeaManager` that manages application data (initially in-memory, with a one-time load from `localStorage` for data continuity) using well-defined TypeScript interfaces from `/contracts`. Core utilities for ID generation and application logging, basic data integrity checks, and unit test stubs are established within `/core`. **Furthermore, foundational contracts and stubs for future LLM integration (`LLMExecutor` interface, `llmAuditLogger`) have been created, preparing the architecture for LLM-agnostic operations and advanced AI agent interactions.** The React UI (`src/`) now interacts with the `IdeaManager` for all thought and segment data operations, removing direct `localStorage` persistence for these entities from the UI layer. The project structure is now robustly prepared for Phase 1, which will introduce a dedicated backend API, SQLite persistence, and further integrations. Documentation stubs, including notes on data migration and the hybrid architecture vision, have been established.

---
(End of Revised Phase 0 Section)
