### Story #8 — “Code Ninjas: Helping Hands That Scale”

**Setup**

The franchise owner of a Code Ninjas dojo installs **LogoMesh-Edu** on a tiny Intel NUC (16 GB RAM) sitting in the network closet.
Classroom realities:

| Asset                           | Constraints                          | Relevance to Phase 2                        |
| ------------------------------- | ------------------------------------ | ------------------------------------------- |
| **20 low-power Win laptops**    | Chrome-only; no admin rights         | Front-end must be a PWA served over the LAN |
| **Dojo note system (web-only)** | No structured export                 | LogoMesh scraper plugin needed              |
| **Curriculum**                  | MakeCode Arcade (JS) → Unity/C#      | Multi-language plugin manifest essential    |
| **Help workflow**               | Kids raise hands; senseis overloaded | Real-time dashboards & alert throttling     |

Active plugins on the NUC:

| Plugin                  | Purpose                                                   | Phase 2 guardrails                |
| ----------------------- | --------------------------------------------------------- | --------------------------------- |
| `StudentBeacon` (JS)    | Browser add-on broadcasting compile errors + “help” pings | 20 MB cap; rate-limit 1 msg / 5 s |
| `LinterLite-Py`         | Fast static analysis of MakeCode projects                 | CPU-bound; sandboxed              |
| `UnityBuildWatcher-C#`  | Monitors Unity logs for red-flag errors                   | 150 MB RAM ceiling                |
| `AssistQueue`           | Prioritises help requests by error severity + idle time   | Realtime class                    |
| `MentorDashboard-React` | Displays queue, code snippets, and quick-fix tips         | Auto-reload if build fails        |
| `PatternMiner-TinyLLM`  | 3 GB q4 model summarising recurring mistakes each week    | VRAM-capped, background           |
| `DeltaStore-SQLite`     | Rolling log (7 days) of events & fixes                    | Auto-prune to 2 GB                |

---

#### Event chain — *After-School Belt Hour*

* **16 : 05** Twenty kids log in; `StudentBeacon` handshake adds them to *Class 4-Green* room.

* **16 : 14** Emma’s JavaScript sprite won’t jump. Her laptop emits compile error `undefined property "yVelocity"`.

  * `StudentBeacon` sends error packet (43 bytes).
  * `AssistQueue` scores it *medium*; places Emma fifth in line.

* **16 : 17 — Sensei overload**

  * Four students raise hands simultaneously. `AssistQueue` detects queue length > 8, triggers a **“triage mode”** toast on MentorDashboard.
  * `LinterLite-Py` auto-generates a one-liner suggestion for trivial syntax errors and pushes it straight to affected screens (opt-in). Two kids clear their issues without human help, queue drops to 5.

* **16 : 33 — Unity project meltdown**

  * Liam’s laptop begins a heavy Unity build; `UnityBuildWatcher` catches 17 shader-compile errors.
  * Error payload exceeds 10 KB; plugin stays within RAM, but CPU spikes. LogoMesh scheduler demotes PatternMiner to *idle* priority, guaranteeing real-time queue stays snappy.

* **16 : 45 — Network hiccup**

  * Switch reboot causes 30 s LAN drop. Laptop PWAs go **offline-queue**: events stored locally.
  * NUC keeps analysing cached data; Senseis still see the last good dashboard state.
  * Link returns; `StudentBeacon` deltas replay idempotently—no double counts.

* **17 : 02 — Session wrap**

  * Scoreboard: 58 help requests, 43 auto-resolved, average wait 2 m 11 s (down from 9 m last week).
  * `PatternMiner-TinyLLM` processes the night’s logs, outputting:

    * Top 3 recurring MakeCode mistakes
    * Common Unity shader pitfalls
    * Suggested 10-min micro-lesson for tomorrow
  * Digest emailed to owner; JSON API exposes it to the existing note system (scraped & tagged).

---

#### Why Phase 2 Must Deliver These Guarantees

| Capability                        | Classroom impact                                                          |
| --------------------------------- | ------------------------------------------------------------------------- |
| **LAN-only PWA + Beacon**         | No admin rights on student laptops, yet real-time telemetry still works.  |
| **Per-plugin CPU / RAM ceilings** | One Unity build can’t freeze the linter or dashboard.                     |
| **Priority scheduler**            | Relegates weekly analytics (LLM) when real-time help spikes.              |
| **Offline-first event queue**     | 30 s switch reboot doesn’t lose data or confuse Senseis.                  |
| **Auto-suggest + opt-in push**    | Low-risk fixes dispatched without human bottleneck, halving queue length. |
| **Rolling log with smart prune**  | Seven-day history fits in 2 GB, preventing SD-wear or disk exhaustion.    |

With those Phase-2 pillars, LogoMesh-Edu turns a single NUC and browser plug-ins into a “second pair of hands” for every Code Sensei—cutting response times, spotting curriculum pain-points, and never collapsing when a teenager’s Unity shader chain decides to self-destruct.
