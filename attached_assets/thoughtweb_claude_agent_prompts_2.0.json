{
  "claude_agent_prompts": [
    {
      "context": "You are my Claude 3.5 development assistant, working inside the Replit IDE on the ThoughtWeb React project. ThoughtWeb is a local-first, tag-driven, cognitively-aligned thought network. All changes you make must be committed, pushed, and tested automatically via our existing CI, pre-commit hooks, and test suite."
    },
    {
      "category": "1. Add New Thought Modal Plumbing",
      "tasks": [
        "In App.jsx, lift \u201cthoughts\u201d state and its setter setThoughts into the top-level component, and pass a new prop createThought to AddThoughtModal.",
        "In AddThoughtModal.jsx, wire the Title, Description, Tags, and Segment inputs so that clicking \u201cAdd Thought\u201d calls createThought({ title, description, tags, segments }) with ULID-generated IDs.",
        "After createThought resolves, close the modal and update the sidebar and canvas UI."
      ]
    },
    {
      "category": "2. Persist New Thoughts Locally",
      "tasks": [
        "Inside createThought, when you update state via setThoughts, also write the updated array to localStorage under 'thought-web-data'.",
        "In App.jsx on startup, hydrate the thoughts state from localStorage (falling back to an empty array if none exists).",
        "Ensure that import/export handlers continue to overwrite or merge appropriately with localStorage."
      ]
    },
    {
      "category": "3. Integrate ULID for Time-Sortable IDs",
      "tasks": [
        "Uninstall the uuid package and install ulid (`npm uninstall uuid && npm install ulid`).",
        "Create helper functions newBubbleId() and newSegmentId() that return 'tb_'+ulid() and 'seg_'+ulid(), respectively.",
        "Update all new thought and new segment factories (in createThought, in your generator script, and in tests) to use ULIDs."
      ]
    },
    {
      "category": "4. Wire Canvas Rendering & Highlighting",
      "tasks": [
        "In App.jsx, pass thoughts, setSelectedThought, and filteredThoughtIds (activeFilters) into Canvas.jsx.",
        "In Canvas.jsx, map thoughts \u2192 ReactFlow nodes using thought_bubble_id, position.x/y, color, and opacity based on activeFilters.",
        "Ensure clicking a node fires setSelectedThought(thought) and opens the detail panel."
      ]
    },
    {
      "category": "5. Enforce v0.5 JSON Schema at Runtime",
      "tasks": [
        "Add Ajv (or small JSON-schema validator) as a dev dependency (`npm install ajv`).",
        "Load docs/schema.json in importHandler.js and validate the parsed JSON; if invalid, show an alert and abort import.",
        "Write a small utility buildExportPayload(thoughts) that wraps thoughts with complete export_metadata and schema fields."
      ]
    },
    {
      "category": "6. Scaffold Automated Tests",
      "tasks": [
        "Install and configure Vitest (or Jest) if not already done, including test:watch script.",
        "Write unit tests for utility functions: buildExportPayload, parseImportPayload, createThought factory.",
        "Write a React-Testing-Library test for Sidebar filter logic: given a set of thoughts, verify only matching nodes appear.",
        "Write a test for AddThoughtModal: verify that entering data and clicking Add calls createThought and closes modal."
      ]
    },
    {
      "category": "7. Create Thought Bubble Generator Script",
      "tasks": [
        "Under /scripts, create generate-roadmap.js (or .ts) that reads docs/thoughtweb_planning_roadmap.json, validates it, and writes a cleaned export file docs/thoughtweb_export.json.",
        "Have the script use newBubbleId/newSegmentId for any placeholder IDs, and fill created_at tags, content, embedding_vector placeholders.",
        "Add an npm script \"generate:roadmap\": \"node scripts/generate-roadmap.js\"."
      ]
    },
    {
      "category": "8. Hook Up AI Voice Input (Placeholder \u2192 Streaming)",
      "tasks": [
        "Scaffold a VoiceInputManager module that opens the browser\u2019s SpeechRecognition API or streams to OpenAI\u2019s Speech-to-Text endpoint.",
        "In AddThoughtModal, wire the microphone button to capture speech into the Description field in real time.",
        "Write a test that mocks the recognition API and verifies transcript insertion."
      ]
    }
  ]
}