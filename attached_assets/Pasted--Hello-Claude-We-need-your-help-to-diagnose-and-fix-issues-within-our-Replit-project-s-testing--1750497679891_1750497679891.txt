
Hello Claude,

We need your help to diagnose and fix issues within our Replit project's testing environment. Currently, running `npm test` (which uses Vitest) is problematic, leading to test failures and sometimes causing the Replit sandbox to roll back changes unexpectedly. Our goal is to get the test suite to a stable state where we can reliably run tests.

To do this, we'll follow a structured, hypothesis-driven debugging plan. I've outlined this plan as a Mermaid diagram below. Your task will be to execute specific steps, report observations and command outputs precisely, and help us navigate through this decision tree. I will guide you step-by-step through the diagram.

**Debugging Plan (Mermaid Diagram):**

```mermaid
graph TD
    A[Start Debugging Test Environment] --> B{Is `vitest.config.ts` present and minimal?};
    B -- Yes --> C{Hypothesis 1: Basic Vitest setup issue (no React plugins)};
    B -- No --> B_Fix[ACTION: Create minimal `vitest.config.ts`. Then re-test basic command.];
    C --> C1[TEST: Run a very simple test on a non-React, plain JS/TS utility file. Command: `npm test src/utils/__tests__/eventBus.test.js`];
    C1 -- Passes --> D{Hypothesis 2: Issue is specific to React/JSX/TSX processing.};
    C1 -- Fails (or rollback) --> C2{Hypothesis 1a: Fundamental `npm test` or Vitest execution problem.};
    C2 --> C2_Action[ACTION: Try `npx vitest run src/utils/__tests__/eventBus.test.js` (direct execution). Report output.];
    C2_Action -- Passes --> C2_Conclude_NPM[CONCLUSION: `npm test` script itself or its environment is problematic.];
    C2_Action -- Fails (or rollback) --> C2_Conclude_Vitest[CONCLUSION: Vitest execution itself is problematic.];

    D --> D1[ACTION: Ensure `src/App.test.jsx` exists. If not, rename `src/App.test.js` to `src/App.test.jsx`.];
    D1 --> D2[TEST: Run test for `src/App.test.jsx`. Command: `npm test src/App.test.jsx`];
    D2 -- Passes --> E{Hypothesis 3: Issue is with other component tests or global React test setup.};
    D2 -- Fails (JSX Parse Error) --> D_Fix_JSX[ACTION: Try adding `@vitejs/plugin-react` to `vitest.config.ts` (I will help you install it if possible, or we'll mock its presence). Then re-test `src/App.test.jsx`.];
    D_Fix_JSX -- Test Passes --> E;
    D_Fix_JSX -- Test Still Fails --> D_Conclude_JSX[CONCLUSION: Deeper JSX/TSX transformation issue.];
    D2 -- Fails (React is not defined / Rollback) --> D_Conclude_React[CONCLUSION: Global React context issue in tests or severe sandbox instability.];

    E --> E1[ACTION: Focus on one failing component test, e.g., `src/components/__tests__/Canvas.test.jsx`. Ensure it has `import React from 'react';` if missing.];
    E1 --> E2[TEST: Run `npm test src/components/__tests__/Canvas.test.jsx`];
    E2 -- Passes --> F[SUCCESS: Problem likely missing React import or specific to that component. Apply fix to others.];
    E2 -- Fails (React not defined) --> E_Fix_Plugin[ACTION: Confirm `@vitejs/plugin-react` is in `vitest.config.ts`. If not, add it (I will help). Re-test.];
    E_Fix_Plugin -- Test Passes --> F;
    E_Fix_Plugin -- Test Still Fails --> E_Conclude_Setup[CONCLUSION: Vitest setup for React (`jsdom`, globals, or plugin interaction) is misconfigured.];
    E2 -- Fails (Rollback) --> E_Conclude_Sandbox[CONCLUSION: Sandbox instability is the primary blocker for component tests.];

    A --> Z[If any `npm install` or `npm test` causes a general sandbox rollback at any stage, report this immediately as the primary blocker.];

Your Role & How We'll Proceed:

Understand the Current Step: I will tell you which node in the diagram we are currently working on (e.g., "We are at node A: Start Debugging Test Environment").
Provide Information/Execute Actions:
If the step is a Question (diamond shape): I may ask you to check file existence, or I'll provide you with file contents and ask you to confirm certain conditions.
If the step is an Action/Test (rectangle/box shape): I will give you precise instructions, such as specific shell commands to execute (e.g., npm test src/utils/__tests__/eventBus.test.js) or code changes to make to particular files. If a file needs to be changed, I will provide the complete new content for that file.
Report Accurately: After performing an action or test, you need to provide the full and exact output from the command, including any errors or unexpected behavior. This is crucial for accurate diagnosis.
Await Next Instruction: Based on your report, I will tell you the next node in the diagram to move to.
Critical Alert for Rollbacks: If at any point executing an npm install or npm test command (or any command I ask you to run) results in a message from the Replit environment indicating a general sandbox error or that changes have been rolled back (e.g., "Failed to compute affected file count and total size after command execution"), please report this to me immediately. This is a key behavior we are trying to understand and overcome.
Let's start. We are at Node A: Start Debugging Test Environment.

Our first step is to move to Node B: Is vitest.config.ts present and minimal?

Please confirm if a file named vitest.config.ts exists in the project root. If it does, I will provide its content for you to assess if it's 'minimal' (e.g., basic setup without many complex plugins or configurations yet).