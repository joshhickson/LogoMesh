These are great questions! Let's clarify these points to ensure a smooth execution of Phase 1 v3.0. My goal is to provide clear direction for each of these.
1. Directory Structure & Naming
 * server/ directory: The new server/ directory should be at the project root level, alongside src/, docs/, etc. This clearly separates the backend concerns from the frontend application, making the project structure more modular and easier to navigate.
 * VTC interfaces (contracts/embeddings/): Yes, to maintain the current structure, these should be located within src/contracts/embeddings/. This keeps all application-specific contracts and interfaces organized within the src directory.
2. Environment Configuration
 * .env files: We should create separate .env.example and .env.replit files.
   * .env.example will serve as a template for local development, showing all required environment variables.
   * .env.replit will be specifically configured for the Replit deployment, addressing its unique environment.
     This approach provides clarity and avoids confusion between local and deployment configurations.
 * DB_PATH for Replit: For Replit, DB_PATH should point to /tmp/ for ephemeral storage during development and testing within the Replit environment. If persistent storage is needed for specific Replit deployments (e.g., for a demo or a specific feature that requires data persistence across runs), we will address that separately. For now, ephemeral storage in /tmp/ is sufficient.
3. SQLite Schema & Migration
 * SQLite Schema Definition: You should create the SQLite schema based on the existing TypeScript interfaces. This ensures consistency between our data models and the database structure. Please document this schema clearly in the docs/ directory, perhaps in a new file like docs/database-schema.md.
 * localStorage migration script: Yes, the localStorage migration script should handle both the current data format and any legacy formats from the "ThoughtWeb" era. This is crucial for ensuring a seamless transition for existing users and their data. Robust error handling and data validation should be included in this script.
4. API Architecture
 * Backend API Conventions: The backend API should use RESTful conventions. This includes using clear resource-based URLs (e.g., /api/v1/thoughts/:id/segments), appropriate HTTP methods (GET, POST, PUT, DELETE), and standard HTTP status codes. This promotes consistency and makes the API intuitive to consume.
 * Error Handling: For error handling, we should define a specific error response format that includes a clear error message, a unique error code (if applicable), and potentially additional details for debugging. We will also adhere to a consistent HTTP status code strategy (e.g., 400 for bad requests, 401 for unauthorized, 404 for not found, 500 for internal server errors). We can define this format and strategy more concretely in a new docs/api-error-handling.md document.
5. VTC & CCE Scaffolding
 * VTC interfaces: For Phase 1, the VTC interfaces should be minimal stubs focused on the interface contracts. The goal here is to establish the clear contracts and expected inputs/outputs, without implementing substantive placeholder logic. This allows us to define the API surface without getting bogged down in implementation details that will evolve in later phases.
 * "Ephemeral embedding policy": The "ephemeral embedding policy" should be enforced primarily through a combination of TypeScript types and documentation guidelines. TypeScript types will ensure that the data structures align with the ephemeral nature, and clear documentation will explain the policy and its implications for developers. Runtime checks can be added later if specific critical enforcement points are identified, but for Phase 1, types and docs are sufficient.
6. Testing Strategy
 * Testing Frameworks: The new tests should continue to use the existing Jest setup. This maintains consistency across the project and leverages a testing framework we are already familiar with. There's no need to introduce additional testing frameworks at this stage.
 * SQLite Adapter Testing: For testing the SQLite adapter, the preferred approach is to use in-memory databases. This provides a clean, isolated testing environment for each test run, ensuring that tests are repeatable and don't leave behind residual data. Fixture files can be used in conjunction with in-memory databases to load specific test data scenarios.
Bare Minimum Name Changes Required
You've got a great handle on these! These changes are indeed minimal and crucial for solidifying the LogoMesh branding.
 * Update package.json: change "name": "thought-web" to "name": "logomesh"
 * Update localStorage keys: from 'thought-web-data' to 'logomesh-data'
 * Update references in documentation: particularly in README.md, docs/README-dev.md, and the milestone documents.
 * Update any remaining ThoughtWeb references: in comments, variable names, and export metadata.
 * Update the export format: change "tool": "ThoughtWeb" to "tool": "LogoMesh" in JSON exports.
You are correct that most places already use LogoMesh, so these targeted changes will complete the transition.
Let me know if you have any further questions or if you'd like to dive deeper into any of these points!
