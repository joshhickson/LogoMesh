run = "npm run start"
language = "nodejs"
modules = ["nodejs-20", "web", "nix", "postgresql-16"]

[nix]
packages = ["nodejs", "npm"]
channel = "stable-24_05"

[deployment]
run = ["sh", "-c", "serve -s build -l 3000"]
deploymentTarget = "cloudrun"
build = ["sh", "-c", "npm run build"]

[[ports]]
localPort = 3000
externalPort = 80

[[ports]]
localPort = 3001
externalPort = 3001

[[ports]]
localPort = 5000
externalPort = 5000

[workflows]
runButton = "Start Backend First"

[[workflows.workflow]]
name = "Run"
author = 42214058
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "npm run start"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "cd server && npm run dev"

[[workflows.workflow]]
name = "Lint"
author = 42214058
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "npm run lint"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "npm run format"

[[workflows.workflow]]
name = "Run Frontend & Backend"
author = 42214058
mode = "parallel"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "npm run start"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "cd server && npm run dev"

[[workflows.workflow]]
name = "Run Node-RED"
author = 42214058
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "node-red --userDir ./ --settings node-red-settings.js"

[[workflows.workflow]]
name = "Start Backend First"
author = 42214058
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "cd server && npm install && npm run build && npm start"

[[workflows.workflow]]
name = "Dev Mode"
author = 42214058
mode = "parallel"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "npm start"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "cd server && npm run dev"

[[workflows.workflow]]
name = "Test TaskEngine"
author = 42214058
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "cd server && npm run build && node -e \""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "const { TaskEngine } = require('./dist/core/services/taskEngine.js');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "const { EventBus } = require('./dist/core/services/eventBus.js');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "const { LLMTaskRunner } = require('./dist/core/llm/LLMTaskRunner.js');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "const { OllamaExecutor } = require('./dist/core/llm/OllamaExecutor.js');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = ""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "async function testTaskEngine() {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  console.log('Testing TaskEngine...');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  const eventBus = new EventBus();"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  const taskEngine = new TaskEngine(eventBus);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  // Register a test executor"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  const executor = new OllamaExecutor();"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  const llmRunner = new LLMTaskRunner(executor);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  taskEngine.registerLLMExecutor('test-llm', llmRunner);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  // Create a test pipeline"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  const pipeline = taskEngine.createPipeline({"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    name: 'Test Pipeline',"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    description: 'Simple test pipeline',"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    executionMode: 'sequential',"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    steps: ["

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        type: 'llm',"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        executorId: 'test-llm',"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        input: { prompt: 'Say hello' }"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "      }"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    ]"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  });"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  "

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  console.log('Pipeline created:', pipeline.id);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  console.log('TaskEngine status:', taskEngine.getStatus());"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  console.log('✅ TaskEngine test completed successfully');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "}"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = ""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "testTaskEngine().catch(console.error);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "\""

[[workflows.workflow]]
name = "Test Dev Assistant Plugin"
author = 42214058
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "cd server && npm run build"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "node -e \""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "console.log('Testing LogoMesh Development Assistant Plugin...');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = ""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "// Simulate plugin loading and execution"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "const pluginPath = './plugins/logomesh-dev-assistant/manifest.json';"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "console.log('Loading plugin from:', pluginPath);"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = ""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "// Test plugin commands"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "const testCommands = ["

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  { command: 'analyzeCode', payload: { filePath: './src/App.jsx', analysisType: 'quality' } },"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  { command: 'suggestImprovement', payload: { filePath: './core/services/taskEngine.ts', focus: 'performance' } },"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  { command: 'generateCode', payload: { description: 'Create a simple utility function for ID generation', fileType: 'typescript' } }"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "];"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = ""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "testCommands.forEach((test, i) => {"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = '  console.log(\`Test \${i + 1}: \${test.command}\`);'

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  console.log('Payload:', JSON.stringify(test.payload, null, 2));"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "  console.log('---');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "});"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = ""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "console.log('✅ Plugin test framework ready');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "console.log('Next: Wire plugin to LLMTaskRunner and start building!');"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "\""
